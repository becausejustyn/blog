{
  "hash": "808b0fa53cc192724e3c2ccefc582d69",
  "result": {
    "markdown": "---\ntitle: \"Elo I\"\ndate: \"2022-07-10\"\ncategories: ['R', 'NFL', 'Python']\nexecute: \n  freeze: true\n  eval: true\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n\n<h2>What is Elo?</h2>\n\nThe [Elo rating system](https://en.wikipedia.org/wiki/Elo_rating_system) was initially developed as a method to compare relative skill among two chess players. Elo has become fairly popular due to its simplicity, and how easy it is to make simple adjustments to.\n\n::: column-margin\nAn example for how easy it can be to make adjustments, you can view 538's version of Elo [here](https://fivethirtyeight.com/methodology/how-our-nfl-predictions-work/).\n:::\n\n::: column-margin\nFrom 2023, sports forcasting from 538 has been cut, so the link in the future may not work.\n:::\n\nThe Elo formula essentially has two steps.\n\n1.  Calculating an expected score\n2.  Updating scores based on the expected scores\n\n<h2>Expected Score</h2>\n\nExpected score translates to the win probability for $Team_{A}$. To calculate this, you start with a baseline value of 1500.\n\n::: callout-note\nIt is common to use 1500 as a starting number, however, this can be any number depending what ranges of numbers you want. In short, 1500 is what you could expect an average player or team to hover around.\n:::\n\n::: column-margin\nWith the win probability for $Team_{B}$ being 1 - Expected Score($Team_{A}$). Draws are very rare in NFL games so I am ignoring them for now.\n:::\n\n$$\\text{Expected Score}(Team_{A}) = Pr(Team_{A} \\text{ beats } Team_{B})$$ $$= \\frac{1}{1 + 10^{\\frac{\\left| Elo_{Team A} - Elo_{Team B} \\right|}{400}}}$$\n\n::: column-margin\nWhich is basically the sigmoid function, e.g. $$f(x) = \\frac{1}{1 + e^{-x}}$$, however, Arpad Elo used $\\log_{10}$ instead of $\\log_{e}$ odds.\n:::\n\n::: callout-note\nThe 400 used is referred to as the Scale Factor. This value can change based on how spread out you want the Elo scores to be. Using the traditional 400 as the scaling factor means a difference in 400 Elo points gives the favourite a 90% chance of winning.\n:::\n\n<h2>Update Rule</h2>\n\nAfter a match occurs, the previous Elo ratings get updated based on the difference between expected and actual results. Results are coded as a 0 for a loss, 0.5 for a draw, and 1 for a win. The update rule occurs via:\n\n$$\\underbrace{Elo_{Team A}}_{\\text{new Elo}} = \\underbrace{Elo_{Team A}}_{\\text{old Elo}} + \\text{ K Factor } \\Big (\\text{ Actual Score }_{Team A} - \\text{ Expected Score }_{Team A}\\Big )$$\n\nAnd the corresponding for $Team_{B}$.\n\n::: callout-note\nK-factor determines how much a single game has on the rankings. A higher value means the ratings are more sensitive to recent games, which increases the variance of values. For NFL games it is common to use a K value between 20 and 25.\n:::\n\n<h2>Simple Example</h2>\n\nFor example, say $Team_{A}$ has an Elo rating of $1600$ and $Team_{B}$ has a rating of $1500$, then we simply input the values into the formula, giving $Team_{A}$ a $64\\%$ chance of winning.\n\n$$\\text{Expected Score/Win Probability} = \\frac{1}{1+10^{\\frac{(1500 - 1600)}{400}}} = \\frac{1}{1 + 10^{\\frac{-100}{400}}} = 0.64$$\n\nIf $Team_{A}$ won the match, we would do\n\nFor $Team_{A}$\n\n$$\\underset{Current Elo}{1600} + 20 \\Big(\\underbrace{1}_{\\substack{Actual \\\\ Score}} - \\underbrace{0.64}_{\\substack{Expected \\\\ Score}} \\Big ) = 1607$$\n\nand $Team_{B}$\n\n$$\\underset{Current Elo}{1500} + 20 \\Big(\\underbrace{0}_{\\substack{Actual \\\\ Score}} - \\underbrace{0.36}_{\\substack{Expected \\\\ Score}} \\Big ) = 1493$$\n\n::: column-margin\nBecause it is a zero sum game, the amount of points one team gains, the other team loses.\n:::\n\n<h2>Example with Code</h2>\n\nThis can be done in `R` or `Python` with\n\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef get_expected_score(team_a, team_b):\n    '''\n    also win_probability\n    '''\n    exp = (team_b - team_a) / 400.\n    return 1. / (1. + 10. ** exp)\n\n# team_a_new_elo = team_a_old_elo + K (score for team A - expected score for team A)\n\ndef rate_1vs1(p1, p2, k=20, drawn=False):\n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    if drawn == True:\n        s1, s2 = 0.5, 0.5\n    else:\n        s1, s2 = 1, 0\n    new_p1 = p1 + k * (s1 - exp_p1)\n    new_p2 = p2 + k * (s2 - exp_p2)\n    return new_p1, new_p2\n\n#print(get_expected_score(1600, 1500))\n\nexample1 = rate_1vs1(1600, 1500)\nexample2 = rate_1vs1(1500, 1600)\nprint(f'New Scores if \\n Team A Wins \\n Team A: {example1[0]} \\t Team B: {example1[1]} \\nTeam B Wins \\n Team A: {example2[0]} \\t Team B: {example2[1]}') #\\s\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew Scores if \n Team A Wins \n Team A: 1607.1987000039423 \t Team B: 1492.8012999960577 \nTeam B Wins \n Team A: 1512.8012999960577 \t Team B: 1587.1987000039423\n```\n:::\n\n```{.python .cell-code}\nprint(f'Win Probability for Team A: {get_expected_score(1600, 1500)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWin Probability for Team A: 0.6400649998028851\n```\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_expected_score <- function(team_a, team_b) {\n  exp <- (team_b - team_a) / 400\n  return(1 / (1 + 10^exp))\n}\n\nrate_1vs1 <- function(p1, p2, k = 20, drawn = FALSE) {\n  rp1 <- 10^(p1 / 400)\n  rp2 <- 10^(p2 / 400)\n  exp_p1 <- rp1 / (rp1 + rp2)\n  exp_p2 <- rp2 / (rp1 + rp2)\n  s1 <- ifelse(drawn == TRUE, 0.5, 1)\n  s2 <- ifelse(drawn == TRUE, 0.5, 0)\n  new_p1 <- p1 + k * (s1 - exp_p1)\n  new_p2 <- p2 + k * (s2 - exp_p2)\n  return(c(new_p1, new_p2))\n}\n\n# using this library so f-strings work the same as python\nlibrary(glue)\n\nexample1 = rate_1vs1(1600, 1500)\nexample2 = rate_1vs1(1500, 1600)\n\nglue('New Scores if \\n Team A Wins \\n Team A: {example1[1]} \\t Team B: {example1[2]} \\nTeam B Wins \\n Team A: {example2[1]} \\t Team B: {example2[2]}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew Scores if \n Team A Wins \n Team A: 1607.19870000394 \t Team B: 1492.80129999606 \nTeam B Wins \n Team A: 1512.80129999606 \t Team B: 1587.19870000394.\n```\n:::\n\n```{.r .cell-code}\nglue('Win Probability for Team A: {get_expected_score(1600, 1500)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWin Probability for Team A: 0.640064999802885\n```\n:::\n\n```{.r .cell-code}\n# note that R uses 1-indexing so the first object is [1] instead of [0] \n```\n:::\n\n:::\n\n<h2> Making Adjustments </h2>\n\nThere are many simple adjustments that you can make to the Elo algoirthm such as home field advantage, margin of victory (MOV), or turnover differential.\n\n<h3> Margin of Victory (MOV) </h3>\n\n[FiveThirtyEight](page) use the following for their MOV adjustment:\n\n$$\\ln(\\left| MOV \\right| + 1)$$\n\nBy using the log function, a shrinkage effect occurs where blowout results are discounted. For example, winning a game by 28 points is not much more useful than winning by 21 points. This also addresses situations where a team can inflate their ranking by having a very large win.\n\n$$\\text{Margin of Victory Multiplier} = ln(|\\text{PointDiff}| +1) \\times \\frac{2.2}{|Elo_{A} - Elo_{B}| \\times 0.001 + 2.2}$$ \n\n<h3> Turnover and Yard Differential </h3>\n\nIf you want to include turnover differential you could add the following in front of the formula\n\n$$e^{(\\frac{1}{5}(\\text{Turnover Diff}))} \\times$$\n\n::: {.column-margin}\nYou can if you have the loser's Elo first, then you can simply do $\\left| ELO_{Winner} - ELO_{Loser} \\times -1 \\right|$.\n:::\n\n> Elo ratings here are each teams Elo rating before the game. \n\n<h3> Code </h3>\n\n::: {.panel-tabset}\n\n#### Python \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef rate_1vs1(p1, p2, mov = 1, k = 20, drawn = False):\n    \n    k_multiplier = np.where(mov >= 7, 2.0, 1.0)\n    \n    #k_multiplier = 1.0\n    #if mov >= 7: k_multiplier = 2.0\n    \n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    \n    s1, s2 = np.where(drawn == True, [0.5, 0.5], [1, 0])\n\n    new_p1 = p1 + k_multiplier * k * (s1 - exp_p1)\n    new_p2 = p2 + k_multiplier * k * (s2 - exp_p2)\n    return new_p1, new_p2\n```\n:::\n\n\n#### R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrate_1vs1 <- function(p1, p2, mov = 1, k = 20, drawn = FALSE){\n    k_multiplier = ifelse(mov >= 7, 2.0, 1.0)\n    \n    #k_multiplier = 1.0\n    #if mov >= 7: k_multiplier = 2.0\n    \n    rp1 = 10^(p1/400)\n    rp2 = 10^(p2/400)\n    exp_p1 = rp1 / (rp1 + rp2)\n    exp_p2 = rp2 / (rp1 + rp2)\n    \n    s1 = ifelse(drawn == TRUE, 0.5, 1)\n    s2 = ifelse(drawn == TRUE, 0.5, 0)\n\n    new_p1 = p1 + k_multiplier * k * (s1 - exp_p1)\n    new_p2 = p2 + k_multiplier * k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n}\n```\n:::\n\n\n:::\n\n<h3> Yearly Adjustment </h3>\n\n538 regress a teams ELO from the previous year by $\\frac{2}{3}$ towards the baseline of $1500$. This can be achieved via:\n\n$$ELO_{\\text{current year}} = ELO_{\\text{previous year}} \\times \\frac{2}{3} + 1500 \\times \\frac{1}{3}$$\n\nd",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}