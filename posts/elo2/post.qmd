---
title: "Elo II"
date: "2023-06-10"
categories: ['R', 'NFL', 'Python']
execute: 
  freeze: true
  eval: true
format:
  html:
    highlight: true
    code-fold: show
    code-tools: true
    highlight-style: github
---

In the previous post I covered the basics of Elo, so today I will walk through how to calculate Elo using the basic approach.

```{r}
# '../data/games.csv'
```

## First

::: panel-tabset
## R

```{r}
calculate_expected_outcome <- function(elo_a, elo_b, scaling_factor = 400) {
  return (1 / (1 + 10^((elo_b - elo_a) / scaling_factor)))
}
```

## Python

```{python}
def calculate_expected_outcome(team_a: int, team_b: int, scaling_factor = 400):
    return 1 / (1 + 10 ** ((team_b - team_a) / scaling_factor))
```
:::

## Preparing the Data

In Python I use a slightly different approach simply because of what I feel more comfortable with. It is possible to do something closer to what I did in R.

::: panel-tabset
## R

```{r}
update_team_names <- function(data, ...) {
  columns_to_update <- enquos(...)
  
  updated_data <- data |>
    mutate_at(columns_to_update, ~ case_when(
      . == 'OAK' ~ 'LV',
      . == 'SD' ~ 'LAC',
      . == 'STL' ~ 'LA',
      TRUE ~ .
    ))
  
  return(updated_data)
}
```

## Python

```{python}
names_to_replace = {
    'OAK': 'LV',
    'SD': 'LAC',
    'STL': 'LA'
}

df.assign(
  home_team = lambda x: x['home_team'].map(names_to_replace).fillna(x['home_team']),
  away_team = lambda x: x['away_team'].map(names_to_replace).fillna(x['away_team'])
  )
```
:::

## Create Empty DF

This is the easiest step, however, I wrote a function in R to reduce the amount of lines I need to repeat when running this multiple times.

::: panel-tabset
## R

```{r}
make_init_ratings <- function(data) {
  if ("team_a" %in% colnames(data)) {
    team_a <- data$team_a
  } else if ("home_team" %in% colnames(data)) {
    team_a <- data$home_team
  } else {
    stop("Data must contain either 'team_a' or 'home_team' columns.")
  }
  initial_ratings <- data.frame(
    team = unique(team_a),
    elo = 1500
  )
  return(initial_ratings)
}

```

## Python

```{python}
def make_init_ratings(data):
    team_column = 'home_team' if 'home_team' in data.columns else 'team_a'
    teams = data[team_column].unique()
    ratings = pd.DataFrame({'team': teams, 'rating': 1500})
    return ratings
```
:::

Both of these can be initialised the same way, e.g. `inital_ratings = make_init_ratings(nfl)`.

## Prep

::: panel-tabset
## R

```{r}
K <- 32
initial_ratings <- make_init_ratings(nfl)

nfl <- nfl |>
  rename(team_a = home_team, team_b = away_team)

weekly_ratings <- data.frame(week = integer(), team = character(), elo = numeric(), game_id = character())
```

## Python

```{python}
K = 32

initial_ratings = make_init_ratings(nfl)
nfl = nfl.rename(columns = {'home_team': 'team_a', 'away_team': 'team_b'})

weekly_ratings = pd.DataFrame(columns = ['week', 'team', 'elo'])
```
:::

## Running Elo

::: panel-tabset
## R

```{r}
for (i in 1:nrow(nfl)) {
  team_a <- nfl$team_a[i]
  team_b <- nfl$team_b[i]
  elo_a <- initial_ratings$elo[initial_ratings$team == team_a]
  elo_b <- initial_ratings$elo[initial_ratings$team == team_b]
  outcome_a <- nfl$outcome[i]
  outcome_b <- 1 - outcome_a 
  expected_a <- calculate_expected_outcome(elo_a, elo_b)
  expected_b <- 1 - expected_a
  new_elo_a <- elo_a + K * (outcome_a - expected_a)
  new_elo_b <- elo_b + K * (outcome_b - expected_b)
  
  # Store the ratings for this week in the weekly_ratings data frame
  weekly_ratings <- rbind(weekly_ratings, data.frame(game_id = nfl$game_id[i], week = nfl$week[i], team = team_a, elo = new_elo_a))
  weekly_ratings <- rbind(weekly_ratings, data.frame(game_id = nfl$game_id[i], week = nfl$week[i], team = team_b, elo = new_elo_b))
  
  # Update the ratings in the initial_ratings data frame
  initial_ratings$elo[initial_ratings$team == team_a] <- new_elo_a
  initial_ratings$elo[initial_ratings$team == team_b] <- new_elo_b
}
```

## Python

```{python}
for index, row in nfl.iterrows():
    team_a = row['team_a']
    team_b = row['team_b']
    elo_a = initial_ratings.loc[initial_ratings['team'] == team_a, 'rating'].values[0]
    elo_b = initial_ratings.loc[initial_ratings['team'] == team_b, 'rating'].values[0]
    outcome_a = row['outcome']
    outcome_b = 1 - outcome_a
    expected_a = calculate_expected_outcome(elo_a, elo_b)
    expected_b = 1 - expected_a
    new_elo_a = elo_a + K * (outcome_a - expected_a)
    new_elo_b = elo_b + K * (outcome_b - expected_b)
    
    # Create DataFrames for the current week's ratings
    week_ratings = pd.DataFrame({'week': [row['week'], row['week']],
                                  'team': [team_a, team_b],
                                  'elo': [new_elo_a, new_elo_b]})
    
    # Concatenate the week's ratings to the weekly_ratings DataFrame
    weekly_ratings = pd.concat([weekly_ratings, week_ratings], ignore_index=True)

    # Update the ratings in the initial_ratings DataFrame
    initial_ratings.loc[initial_ratings['team'] == team_a, 'rating'] = new_elo_a
    initial_ratings.loc[initial_ratings['team'] == team_b, 'rating'] = new_elo_b
```
:::
