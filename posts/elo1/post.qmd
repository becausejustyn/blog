---
title: "Elo I"
date: "2022-07-10"
categories: ['R', 'NFL', 'Python']
execute: 
  freeze: true
  eval: true
format:
  html:
    highlight: true
    code-fold: show
    code-tools: true
    highlight-style: github
---

<h2>What is Elo?</h2>

The [Elo rating system](https://en.wikipedia.org/wiki/Elo_rating_system) was initially developed as a method to compare relative skill among two chess players. Elo has become fairly popular due to its simplicity, and how easy it is to make simple adjustments to.

::: column-margin
An example for how easy it can be to make adjustments, you can view 538's version of Elo [here](https://fivethirtyeight.com/methodology/how-our-nfl-predictions-work/).
:::

::: column-margin
From 2023, sports forcasting from 538 has been cut, so the link in the future may not work.
:::

The Elo formula essentially has two steps.

1.  Calculating an expected score
2.  Updating scores based on the expected scores

<h2>Expected Score</h2>

Expected score translates to the win probability for $Team_{A}$. To calculate this, you start with a baseline value of 1500.

::: callout-note
It is common to use 1500 as a starting number, however, this can be any number depending what ranges of numbers you want. In short, 1500 is what you could expect an average player or team to hover around.
:::

::: column-margin
With the win probability for $Team_{B}$ being 1 - Expected Score($Team_{A}$). Draws are very rare in NFL games so I am ignoring them for now.
:::

$$\text{Expected Score}(Team_{A}) = Pr(Team_{A} \text{ beats } Team_{B})$$ $$= \frac{1}{1 + 10^{\frac{\left| Elo_{Team A} - Elo_{Team B} \right|}{400}}}$$

::: column-margin
Which is basically the sigmoid function, e.g. $$f(x) = \frac{1}{1 + e^{-x}}$$, however, Arpad Elo used $\log_{10}$ instead of $\log_{e}$ odds.
:::

::: callout-note
The 400 used is referred to as the Scale Factor. This value can change based on how spread out you want the Elo scores to be. Using the traditional 400 as the scaling factor means a difference in 400 Elo points gives the favourite a 90% chance of winning.
:::

<h2>Update Rule</h2>

After a match occurs, the previous Elo ratings get updated based on the difference between expected and actual results. Results are coded as a 0 for a loss, 0.5 for a draw, and 1 for a win. The update rule occurs via:

$$\underbrace{Elo_{Team A}}_{\text{new Elo}} = \underbrace{Elo_{Team A}}_{\text{old Elo}} + \text{ K Factor } \Big (\text{ Actual Score }_{Team A} - \text{ Expected Score }_{Team A}\Big )$$

And the corresponding for $Team_{B}$.

::: callout-note
K-factor determines how much a single game has on the rankings. A higher value means the ratings are more sensitive to recent games, which increases the variance of values. For NFL games it is common to use a K value between 20 and 25.
:::

<h2>Simple Example</h2>

For example, say $Team_{A}$ has an Elo rating of $1600$ and $Team_{B}$ has a rating of $1500$, then we simply input the values into the formula, giving $Team_{A}$ a $64\%$ chance of winning.

$$\text{Expected Score/Win Probability} = \frac{1}{1+10^{\frac{(1500 - 1600)}{400}}} = \frac{1}{1 + 10^{\frac{-100}{400}}} = 0.64$$

If $Team_{A}$ won the match, we would do

For $Team_{A}$

$$\underset{Current Elo}{1600} + 20 \Big(\underbrace{1}_{\substack{Actual \\ Score}} - \underbrace{0.64}_{\substack{Expected \\ Score}} \Big ) = 1607$$

and $Team_{B}$

$$\underset{Current Elo}{1500} + 20 \Big(\underbrace{0}_{\substack{Actual \\ Score}} - \underbrace{0.36}_{\substack{Expected \\ Score}} \Big ) = 1493$$

::: column-margin
Because it is a zero sum game, the amount of points one team gains, the other team loses.
:::

<h2>Example with Code</h2>

::: column-margin
I try to have the code almost identical between the two languages where possible.
:::

This can be done in `R` or `Python` with

::: panel-tabset
### Python

```{python}
def get_expected_score(team_a, team_b):
    '''
    also win_probability
    '''
    exp = (team_b - team_a) / 400.
    return 1. / (1. + 10. ** exp)

# team_a_new_elo = team_a_old_elo + K (score for team A - expected score for team A)

def rate_1vs1(p1, p2, k = 20, drawn = False):
    rp1 = 10 ** (p1 / 400)
    rp2 = 10 ** (p2 / 400)
    exp_p1 = rp1 / float(rp1 + rp2)
    exp_p2 = rp2 / float(rp1 + rp2)
    if drawn == True:
        s1, s2 = .5, .5
    else:
        s1, s2 = 1, 0
    new_p1 = p1 + k * (s1 - exp_p1)
    new_p2 = p2 + k * (s2 - exp_p2)
    return new_p1, new_p2

#print(get_expected_score(1600, 1500))

example1 = rate_1vs1(1600, 1500)
example2 = rate_1vs1(1500, 1600)
print(f'New Scores if \n Team A Wins \n Team A: {example1[0]} \t Team B: {example1[1]} \nTeam B Wins \n Team A: {example2[0]} \t Team B: {example2[1]}') #\s
print(f'Win Probability for Team A: {get_expected_score(1600, 1500)}')
```

### R

```{r}
get_expected_score <- function(team_a, team_b) {
  exp <- (team_b - team_a) / 400
  return(1 / (1 + 10^exp))
}

rate_1vs1 <- function(p1, p2, k = 20, drawn = FALSE) {
  rp1 <- 10^(p1 / 400)
  rp2 <- 10^(p2 / 400)
  exp_p1 <- rp1 / (rp1 + rp2)
  exp_p2 <- rp2 / (rp1 + rp2)
  s1 <- ifelse(drawn == TRUE, 0.5, 1)
  s2 <- ifelse(drawn == TRUE, 0.5, 0)
  new_p1 <- p1 + k * (s1 - exp_p1)
  new_p2 <- p2 + k * (s2 - exp_p2)
  return(c(new_p1, new_p2))
}

# using this library so f-strings work the same as python
library(glue)

example1 = rate_1vs1(1600, 1500)
example2 = rate_1vs1(1500, 1600)

glue('New Scores if \n Team A Wins \n Team A: {example1[1]} \t Team B: {example1[2]} \nTeam B Wins \n Team A: {example2[1]} \t Team B: {example2[2]}.')
glue('Win Probability for Team A: {get_expected_score(1600, 1500)}')

# note that R uses 1-indexing so the first object is [1] instead of [0] 
```
:::

<h2> Making Adjustments </h2>

There are many simple adjustments that you can make to the Elo algoirthm such as home field advantage, margin of victory (MOV), or turnover differential.

<h3> Margin of Victory (MOV) </h3>

[FiveThirtyEight](page) use the following for their MOV adjustment:

$$\ln(\left| MOV \right| + 1)$$

By using the log function, a shrinkage effect occurs where blowout results are discounted. For example, winning a game by 28 points is not much more useful than winning by 21 points. This also addresses situations where a team can inflate their ranking by having a very large win.

$$\text{Margin of Victory Multiplier} = ln(|\text{PointDiff}| +1) \times \frac{2.2}{|Elo_{A} - Elo_{B}| \times 0.001 + 2.2}$$ 

<h3> Turnover and Yard Differential </h3>

If you want to include turnover differential you could add the following in front of the formula

$$e^{(\frac{1}{5}(\text{Turnover Diff}))} \times$$

::: {.column-margin}
You can if you have the loser's Elo first, then you can simply do $\left| ELO_{Winner} - ELO_{Loser} \times -1 \right|$.
:::

> Elo ratings here are each teams Elo rating before the game. 

<h3> Code </h3>

::: {.panel-tabset}

#### Python 

```{python}
def rate_1vs1(p1, p2, mov = 1, k = 20, drawn = False):
    
    k_multiplier = np.where(mov >= 7, 2., 1.)
    
    #k_multiplier = 1.0
    #if mov >= 7: k_multiplier = 2.0
    
    rp1 = 10 ** (p1/400)
    rp2 = 10 ** (p2/400)
    exp_p1 = rp1 / float(rp1 + rp2)
    exp_p2 = rp2 / float(rp1 + rp2)
    
    s1, s2 = np.where(drawn == True, [.5, .5], [1, 0])

    new_p1 = p1 + k_multiplier * k * (s1 - exp_p1)
    new_p2 = p2 + k_multiplier * k * (s2 - exp_p2)
    return new_p1, new_p2
```

#### R 

```{r}
rate_1vs1 <- function(p1, p2, mov = 1, k = 20, drawn = FALSE){
    k_multiplier = ifelse(mov >= 7, 2.0, 1.0)
    
    #k_multiplier = 1.0
    #if mov >= 7: k_multiplier = 2.0
    
    rp1 = 10^(p1/400)
    rp2 = 10^(p2/400)
    exp_p1 = rp1 / (rp1 + rp2)
    exp_p2 = rp2 / (rp1 + rp2)
    
    s1 = ifelse(drawn == TRUE, 0.5, 1)
    s2 = ifelse(drawn == TRUE, 0.5, 0)

    new_p1 = p1 + k_multiplier * k * (s1 - exp_p1)
    new_p2 = p2 + k_multiplier * k * (s2 - exp_p2)
    return(new_p1, new_p2)
}
```

:::

<h3> Yearly Adjustment </h3>

538 regress a teams ELO from the previous year by $\frac{2}{3}$ towards the baseline of $1500$. This can be achieved via:

$$ELO_{\text{current year}} = ELO_{\text{previous year}} \times \frac{2}{3} + 1500 \times \frac{1}{3}$$

For the sake of these exercises, I am only interested in looking at each teams elo for a single season, a yearly adjustment is not too useful at this point.